name: .NET Desktop

on:
  push:
    branches:
      - v1.0

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: v1.0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Install GitHub CLI
      run: |
        Invoke-WebRequest -Uri https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_windows_amd64.msi -OutFile gh.msi
        Start-Process msiexec.exe -ArgumentList '/i', 'gh.msi', '/quiet', '/norestart' -NoNewWindow -Wait
        echo "C:\Program Files\GitHub CLI" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get version from csproj
      id: get_version
      shell: pwsh
      run: |
        $version = (Select-String -Path WIP.Keygen.csproj -Pattern '<Version>(.*)</Version>').Matches.Groups[1].Value
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Get latest release version
      id: get_latest_release
      shell: pwsh
      run: |
        try {
          $latest_release = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest").tag_name
        } catch {
          $latest_release = ""
        }
        echo "LATEST_RELEASE=$latest_release" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Compare versions
      id: compare_versions
      shell: pwsh
      run: |
        if ($env:VERSION -eq $env:LATEST_RELEASE) {
          Write-Host "Version is the same as the latest release. Exiting..."
          exit 0
        }

    - name: Build for win-x64
      run: |
        dotnet publish WIP.Keygen.csproj -c Release -r win-x64 --output bin/Release/win-x64 --self-contained false -p:PublishSingleFile=true
        mv bin/Release/win-x64/WIP.Keygen.exe bin/Release/win-x64/WIP.Keygen.x64.exe

    - name: Build for win-x64-net
      run: |
        dotnet publish WIP.Keygen.csproj -c Release -r win-x64 --output bin/Release/win-x64-net --self-contained true -p:PublishSingleFile=true
        mv bin/Release/win-x64-net/WIP.Keygen.exe bin/Release/win-x64-net/WIP.Keygen.x64-net.exe

    - name: Build for win-x86
      run: |
        dotnet publish WIP.Keygen.csproj -c Release -r win-x86 --output bin/Release/win-x86 --self-contained false -p:PublishSingleFile=true
        mv bin/Release/win-x86/WIP.Keygen.exe bin/Release/win-x86/WIP.Keygen.x86.exe

    - name: Build for win-x86-net
      run: |
        dotnet publish WIP.Keygen.csproj -c Release -r win-x86 --output bin/Release/win-x86-net --self-contained true -p:PublishSingleFile=true
        mv bin/Release/win-x86-net/WIP.Keygen.exe bin/Release/win-x86-net/WIP.Keygen.x86-net.exe

    - name: Create Release
      env:
        VERSION: ${{ env.VERSION }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create $env:VERSION `
          bin/Release/win-x64/WIP.Keygen.x64.exe `
          bin/Release/win-x64-net/WIP.Keygen.x64-net.exe `
          bin/Release/win-x86/WIP.Keygen.x86.exe `
          bin/Release/win-x86-net/WIP.Keygen.x86-net.exe `
          -t $env:VERSION -n "$(git log -1 --pretty=%B)"
