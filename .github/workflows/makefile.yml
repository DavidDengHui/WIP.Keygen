name: MakeFile

on:
  push:
    branches:
      - v1

jobs:
  check-version:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get version from csproj
      id: get_version
      shell: pwsh
      run: |
        $version = (Select-String -Path WIP.Keygen.csproj -Pattern '<Version>(.*)</Version>').Matches.Groups[1].Value
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Get latest release version
      id: get_latest_release
      shell: pwsh
      run: |
        try {
          $latest_release = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest").tag_name
        } catch {
          $latest_release = ""
        }
        echo "LATEST_RELEASE=$latest_release" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Compare versions
      shell: pwsh
      run: |
        if ($env:VERSION -eq $env:LATEST_RELEASE) {
          Write-Host "Version is the same as the latest release. Exiting..."
          exit 1
        }

  build-publish:
    runs-on: windows-latest
    needs: check-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install .NET Framework Developer Pack
      run: |
        choco install dotnetfx --version=4.8.0.20190930
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools --includeRecommended --includeOptional"

    - name: Install GitHub CLI
      run: |
        Invoke-WebRequest -Uri https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_windows_amd64.msi -OutFile gh.msi
        Start-Process msiexec.exe -ArgumentList '/i', 'gh.msi', '/quiet', '/norestart' -NoNewWindow -Wait
        echo "C:\Program Files\GitHub CLI" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install vswhere
      run: choco install vswhere

    - name: Find MSBuild Path
      id: find_msbuild
      run: |
        echo "::set-output name=msbuild_path::$(vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe)"

    - name: Restore NuGet packages
      run: dotnet restore WIP.Keygen.csproj

    - name: Build for win-x64
      run: |
        & "${{ steps.find_msbuild.outputs.msbuild_path }}" WIP.Keygen.csproj /p:Configuration=Release /p:RuntimeIdentifier=win-x64 /p:OutputPath=bin\Release\win-x64 /p:SelfContained=false /p:PublishSingleFile=true /t:Publish
        mv bin/Release/win-x64publish/WIP.Keygen.exe bin/Release/WIP.Keygen.x64.exe

    - name: Build for win-x64-net
      run: |
        & "${{ steps.find_msbuild.outputs.msbuild_path }}" WIP.Keygen.csproj /p:Configuration=Release /p:RuntimeIdentifier=win-x64 /p:OutputPath=bin\Release\win-x64-net /p:SelfContained=true /p:PublishSingleFile=true /t:Publish
        mv bin/Release/win-x64-netpublish/WIP.Keygen.exe bin/Release/WIP.Keygen.x64-net.exe

    - name: Build for win-x86
      run: |
        & "${{ steps.find_msbuild.outputs.msbuild_path }}" WIP.Keygen.csproj /p:Configuration=Release /p:RuntimeIdentifier=win-x86 /p:OutputPath=bin\Release\win-x86 /p:SelfContained=false /p:PublishSingleFile=true /t:Publish
        mv bin/Release/win-x86publish/WIP.Keygen.exe bin/Release/WIP.Keygen.x86.exe

    - name: Build for win-x86-net
      run: |
        & "${{ steps.find_msbuild.outputs.msbuild_path }}" WIP.Keygen.csproj /p:Configuration=Release /p:RuntimeIdentifier=win-x86 /p:OutputPath=bin\Release\win-x86-net /p:SelfContained=true /p:PublishSingleFile=true /t:Publish
        mv bin/Release/win-x86-netpublish/WIP.Keygen.exe bin/Release/WIP.Keygen.x86-net.exe

    - name: Create Release
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      shell: pwsh
      run: |
        $version = (Select-String -Path WIP.Keygen.csproj -Pattern '<Version>(.*)</Version>').Matches.Groups[1].Value
        echo $env:GH_TOKEN | gh auth login --with-token
        gh release create $version `
          bin/Release/WIP.Keygen.x64.exe `
          bin/Release/WIP.Keygen.x64-net.exe `
          bin/Release/WIP.Keygen.x86.exe `
          bin/Release/WIP.Keygen.x86-net.exe `
          -t $version -n "$(git log -1 --pretty=%B)"